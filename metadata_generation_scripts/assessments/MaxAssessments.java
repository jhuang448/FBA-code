import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

// class MaxAssessments
//
// This class represents the maximum values that different assessments can 
// take on. This class exists solely for the purpose of normalizing student 
// assessments. 
//
// To instantiate a MaxAssessments object, we parse a text file, 
// "Middle_School_Band_Max_Scores.txt", that was generated by copy-pasting 
// from "MaximumScores.xlsx". 
//
// Authored by Chris Laguna
public class MaxAssessments {

    ////////////////////////// fields ////////////////////////

    // Public so I can access them in MiddleSchoolStudentAssessments. You think I want to 
    // write 50 getters?? Heck no!
    public float lyrical_etude_musicality_tempo_style;
    public float lyrical_etude_tone_quality;
    public float lyrical_etude_note_accuracy;
    public float lyrical_etude_rhythmic_accuracy;
    public float lyrical_etude_artistry;

    public float mallet_etude_musicality_tempo_style;
    public float mallet_etude_note_accuracy;
    public float mallet_etude_rhythmic_accuracy;

    public float reading_mallet_note_accuracy_tone;
    public float reading_mallet_rhythmic_accuracy_articulation;
    public float reading_mallet_musicality_style;

    public float reading_snare_note_accuracy_tone;
    public float reading_snare_rhythmic_accuracy_articulation;
    public float reading_snare_musicality_style;

    public float scales_chromatic;
    public float scales_note_accuracy;
    public float scales_tempo_consistency;
    public float scales_musicality_phrasing_style;

    public float scales_g;
    public float scales_c;
    public float scales_f;
    public float scales_bb;
    public float scales_eb;
    public float scales_ab;
    public float scales_db;
    public float scales_gb;
    public float scales_b;
    public float scales_e;
    public float scales_a;
    public float scales_d;

    public float scales_note_accuracy_consistency;
    public float scales_tone_quality;
    public float scales_musicality_tempo_style;
    public float scales_articulation_style;

    public float sight_reading_note_accuracy;
    public float sight_reading_rhythmic_accuracy;
    public float sight_reading_musicality_tempo_style;
    public float sight_reading_tone_quality;
    public float sight_reading_artistry;

    public float snare_etude_musicality_tempo_style;
    public float snare_etude_note_accuracy;
    public float snare_etude_rhythmic_accuracy;

    public float technical_etude_musicality_tempo_style;
    public float technical_etude_tone_quality;
    public float technical_etude_note_accuracy;
    public float technical_etude_rhythmic_accuracy;
    public float technical_etude_articulation;
    public float technical_etude_artistry;

    public float timpani_etude_musicality_tempo_style;
    public float timpani_etude_note_accuracy;
    public float timpani_etude_rhythmic_accuracy;
    
    /////////////////////////// methods /////////////////////////////

    // MaxAssessments all start out as -1.f. A MaxAssessments object is not
    // ready for battle until all fields are instantiated (and none have a
    // value of -1.f).
    public MaxAssessments() {
      lyrical_etude_musicality_tempo_style = -1.f;
      lyrical_etude_tone_quality = -1.f;
      lyrical_etude_tone_quality = -1.f;
      lyrical_etude_note_accuracy = -1.f;
      lyrical_etude_rhythmic_accuracy = -1.f;
      lyrical_etude_artistry = -1.f;

      mallet_etude_musicality_tempo_style = -1.f;
      mallet_etude_note_accuracy = -1.f;
      mallet_etude_rhythmic_accuracy = -1.f;

      reading_mallet_note_accuracy_tone = -1.f;
      reading_mallet_rhythmic_accuracy_articulation = -1.f;
      reading_mallet_musicality_style = -1.f;

      reading_snare_note_accuracy_tone = -1.f;
      reading_snare_rhythmic_accuracy_articulation = -1.f;
      reading_snare_musicality_style = -1.f;

      scales_chromatic = -1.f;
      scales_note_accuracy = -1.f;
      scales_tempo_consistency = -1.f;
      scales_musicality_phrasing_style = -1.f;
      scales_g = -1.f;
      scales_c = -1.f;
      scales_f = -1.f;
      scales_bb = -1.f;
      scales_eb = -1.f;
      scales_ab = -1.f;
      scales_db = -1.f;
      scales_note_accuracy_consistency = -1.f;
      scales_tone_quality = -1.f;
      scales_musicality_tempo_style = -1.f;
      scales_articulation_style = -1.f;

      sight_reading_note_accuracy = -1.f;
      sight_reading_rhythmic_accuracy = -1.f;
      sight_reading_musicality_tempo_style = -1.f;
      sight_reading_tone_quality = -1.f;
      sight_reading_artistry = -1.f;

      snare_etude_musicality_tempo_style = -1.f;
      snare_etude_note_accuracy = -1.f;
      snare_etude_rhythmic_accuracy = -1.f;

      technical_etude_musicality_tempo_style = -1.f;
      technical_etude_tone_quality = -1.f;
      technical_etude_note_accuracy = -1.f;
      technical_etude_rhythmic_accuracy = -1.f;
      technical_etude_articulation = -1.f;

      timpani_etude_musicality_tempo_style = -1.f;
      timpani_etude_note_accuracy = -1.f;
      timpani_etude_rhythmic_accuracy = -1.f;
    }
	
  public void parseLine(String line) {
    // Use a second Scanner to parse the content of each line.
    Scanner scanner = new Scanner(line);
    scanner.useDelimiter("\t");
 
      // Make sure line exists. Then, assume it follows the correct format 
      // (five tab-delimited strings).
      if (scanner.hasNext()) {
        // Read in our values.
        String assessment = scanner.next();
        assessment = assessment + scanner.next();
 
        // Remove all non-alpha letters from string to remove ambiguity.
        assessment = assessment.replaceAll("[^a-zA-Z]", "");
        String value_string = scanner.next();

        // Convert from string to ints.
        int value = Integer.parseInt(value_string);

        this.addMax(assessment, value);
    }
  }

  // Instantiate all field from file values.
  public void parseMaxAssessmentFile(String filename) throws FileNotFoundException {
    File file = new File(filename);
    Scanner input = new Scanner(file);

      // Parse line by line.
    while(input.hasNextLine()) {
      String next_line = input.nextLine();
      parseLine(next_line);
    }
  }

	public void addMax(String assessment, float val) { 
    if (assessment.equals("LyricalEtudeMusicalityTempoStyle") ) {
      this.lyrical_etude_musicality_tempo_style = val;
    }
    else if (assessment.equals("LyricalEtudeToneQuality")) {
      this.lyrical_etude_tone_quality = val;
    }
    else if (assessment.equals("LyricalEtudeNoteAccuracy")) {
      this.lyrical_etude_note_accuracy = val;
    }
    else if (assessment.equals("LyricalEtudeRhythmicAccuracy")) {
      this.lyrical_etude_rhythmic_accuracy = val;
    }
    else if (assessment.equals("LyricalEtudeArtistry")) {
      this.lyrical_etude_artistry = val;
    }

    else if (assessment.equals("MalletEtudeMusicalityTempoStyle")) {
      this.mallet_etude_musicality_tempo_style = val;
    }
    else if (assessment.equals("MalletEtudeNoteAccuracy")) {
      this.mallet_etude_note_accuracy = val;
    }
    else if (assessment.equals("MalletEtudeRhythmicAccuracy")) {
      this.mallet_etude_rhythmic_accuracy = val;
    }

    else if (assessment.equals("ReadingMalletNoteAccuracyTone")) {
      this.reading_mallet_note_accuracy_tone = val;
    }
    else if (assessment.equals("ReadingMalletRhythmicAccuracyArticulation")) {
      this.reading_mallet_rhythmic_accuracy_articulation = val;
    }
    else if (assessment.equals("ReadingMalletMusicalityStyle")) {
      this.reading_mallet_musicality_style = val;
    }

    else if (assessment.equals("ReadingSnareNoteAccuracyTone")) {
      this.reading_snare_note_accuracy_tone = val;
    }
    else if (assessment.equals("ReadingSnareRhythmicAccuracyArticulation")) {
      this.reading_snare_rhythmic_accuracy_articulation = val;
    }
    else if (assessment.equals("ReadingSnareMusicalityStyle")) {
      this.reading_snare_musicality_style = val;
    }

    else if (assessment.equals("ScalesChromatic")) {
      this.scales_chromatic = val;
    }
    else if (assessment.equals("ScalesNoteAccuracy")) {
      this.scales_note_accuracy = val;
    }
    else if (assessment.equals("ScalesTempoConsistency")) {
      this.scales_tempo_consistency = val;
    }
    else if (assessment.equals("ScalesMusicalityPhrasingStyle")) {
      this.scales_musicality_phrasing_style = val;
    }
    else if (assessment.equals("ScalesG")) {
      this.scales_g = val;
    }
    else if (assessment.equals("ScalesC")) {
      this.scales_c = val;
    }
    else if (assessment.equals("ScalesF")) {
      this.scales_f = val;
    }
    else if (assessment.equals("ScalesBb")) {
      this.scales_bb = val;
    }
    else if (assessment.equals("ScalesEb")) {
      this.scales_eb = val;
    }
    else if (assessment.equals("ScalesAb")) {
      this.scales_ab = val;
    }
    else if (assessment.equals("ScalesDb")) {
      this.scales_db = val;
    }
    else if (assessment.equals("ScalesGb")) {
      this.scales_gb = val;
    }
    else if (assessment.equals("ScalesB")) {
      this.scales_b = val;
    }
    else if (assessment.equals("ScalesE")) {
      this.scales_e = val;
    }
    else if (assessment.equals("ScalesA")) {
      this.scales_a = val;
    }
    else if (assessment.equals("ScalesD")) {
      this.scales_d = val;
    }
    else if (assessment.equals("ScalesNoteAccuracyConsistency")) {
      this.scales_note_accuracy_consistency = val;
    }
    else if (assessment.equals("ScalesToneQuality")) {
      this.scales_tone_quality = val;
    }
    else if (assessment.equals("ScalesMusicalityTempoStyle")) {
      this.scales_musicality_tempo_style = val;
    }
    else if (assessment.equals("ScalesArticulationStyle")) {
      this.scales_articulation_style = val;
    }

    else if (assessment.equals("SightReadingNoteAccuracy")) {
      this.sight_reading_note_accuracy = val;
    }
    else if (assessment.equals("SightReadingRhythmicAccuracy")) {
      this.sight_reading_rhythmic_accuracy = val;
    }
    else if (assessment.equals("SightReadingMusicalityTempoStyle")) {
      this.sight_reading_musicality_tempo_style = val;
    }
    else if (assessment.equals("SightReadingToneQuality")) {
      this.sight_reading_tone_quality = val;
    }
    else if (assessment.equals("SightReadingArtistry")) {
      this.sight_reading_artistry = val;
    }

    else if (assessment.equals("SnareEtudeMusicalityTempoStyle")) {
      this.snare_etude_musicality_tempo_style = val;
    }
    else if (assessment.equals("SnareEtudeNoteAccuracy")) {
      this.snare_etude_note_accuracy = val;
    }
    else if (assessment.equals("SnareEtudeRhythmicAccuracy")) {
      this.snare_etude_rhythmic_accuracy = val;
    }

    else if (assessment.equals("TechnicalEtudeMusicalityTempoStyle")) {
      this.technical_etude_musicality_tempo_style = val;
    }
    else if (assessment.equals("TechnicalEtudeToneQuality")) {
      this.technical_etude_tone_quality = val;
    }
    else if (assessment.equals("TechnicalEtudeNoteAccuracy")) {
      this.technical_etude_note_accuracy = val;
    }
    else if (assessment.equals("TechnicalEtudeRhythmicAccuracy")) {
      this.technical_etude_rhythmic_accuracy = val;
    }
    else if (assessment.equals("TechnicalEtudeArticulation")) {
      this.technical_etude_articulation = val;
    }
    else if (assessment.equals("TechnicalEtudeArtistry")) {
      this.technical_etude_artistry = val;
    }

    else if (assessment.equals("TimpaniEtudeMusicalityTempoStyle")) {
      this.timpani_etude_musicality_tempo_style = val;
    }
    else if (assessment.equals("TimpaniEtudeNoteAccuracy")) {
      this.timpani_etude_note_accuracy = val;
    }
    else if (assessment.equals("TimpaniEtudeRhythmicAccuracy")) {
      this.timpani_etude_rhythmic_accuracy = val;
    }

    else {
      System.out.println("Couldn't find max for: " + assessment);
    }
  }


}
